{"version":3,"sources":["utils/API.jsx","components/Container.jsx","components/Row.jsx","components/Col.jsx","components/Card.jsx","components/searchForm.jsx","components/ResultList.jsx","components/EmployeeContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","get","Container","props","className","fluid","children","Row","Col","size","split","map","join","Card","heading","SearchForm","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","id","onClick","handleFormSubmit","ResultList","result","slice","results","key","first","last","alt","src","picture","medium","dob","age","phone","email","Employees","state","getUserInfo","query","API","then","res","setState","data","catch","err","console","log","event","target","renderResults","length","preventDefault","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5fc61f12.chunk.js","sourcesContent":["import axios from \"axios\";\nexport default {\n  // Gets all users\n  getUsers: function () {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  },\n};\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Row;\n","import React from \"react\";\n\n// This Col component offers us the convenience of being able to set a column's \"size\" prop instead of its className\n// We can also omit the col- at the start of each Bootstrap column class, e.g. size=\"md-12\" instead of className=\"col-md-12\"\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Col;\n","import React from \"react\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card text-center\">\n      <div className=\"card-header\">\n        <h3>{props.heading}</h3>\n      </div>\n      <div className=\"card-body\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\n\nfunction SearchForm(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search:</label>\n        <input\n          onChange={props.handleInputChange}\n          value={props.search}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search for an Employee\"\n          id=\"search\"\n        />\n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport './resultlist.css'\n\nfunction ResultList(props) {\n  return (\n    <ul className=\"list-group\">\n      {props.result.slice(0,7).map(results => (\n        <li className=\"list-group-item my-list\"  key = {results.id.value}>\n          <strong>{results.name.first} {results.name.last} </strong>\n          <br/>\n          <img alt={results.name.first} className=\"img-fluid image\" src={results.picture.medium} />\n          <br />\n          {results.dob.age}  years old\n          <br/>\n          Phone Number : {results.phone}\n          <br/>\n          Email: {results.email}\n\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ResultList;\n","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\n\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Col from \"./Col\";\nimport Card from \"./Card\";\nimport SearchForm from \"./searchForm\";\nimport ResultList from \"./ResultList\";\n\nclass Employees extends Component {\n  state = {\n    search: \"\",\n    result: [],\n  };\n\n  componentDidMount() {\n    this.getUserInfo();\n  }\n\n  getUserInfo = (query) => {\n    API.getUsers(query)\n      .then((res) => this.setState({ result: res.data.results }))\n      // .then(res => console.log(res.data.results))\n\n      .catch((err) => console.log(err));\n  };\n  handleInputChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  renderResults = () => {\n    if (this.state.result.length < 5) {\n      return this.state.result;\n    }\n    return;\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    this.getUserInfo(this.state.search);\n  };\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col size=\"md-8\">\n            <Card heading={\"Employees\"}>\n              <ResultList result={this.state.result} />\n            </Card>\n          </Col>\n          <Col size=\"md-4\">\n            <SearchForm\n              value={this.state.search}\n              handleInputChange={this.handleInputChange}\n              handleFormSubmit={this.handleFormSubmit}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Employees;\n","import React from 'react';\n\nimport './App.css';\nimport Employee from './components/EmployeeContainer'\n\nfunction App() {\n  return (\n    <Employee />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}