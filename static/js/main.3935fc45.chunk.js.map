{"version":3,"sources":["utils/API.jsx","components/Container.jsx","components/Row.jsx","components/Col.jsx","components/Card.jsx","components/searchForm.jsx","components/ResultList.jsx","components/EmployeeContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","get","Container","props","className","fluid","children","Row","Col","size","split","map","join","Card","heading","SearchForm","htmlFor","value","firstName","name","onChange","handleInputChange","type","placeholder","forhtml","handleSelectChange","id","ResultList","result","index","key","src","picture","large","alt","first","last","email","Employees","state","filteredResults","getUserInfo","query","API","then","res","setState","data","results","catch","err","console","log","event","target","filter","toLowerCase","includes","sortedResults","sort","a","b","dob","date","slice","handleFormSubmit","preventDefault","search","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3935fc45.chunk.js","sourcesContent":["import axios from \"axios\";\nexport default {\n  // Gets all users\n  getUsers: function () {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  },\n};\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Row;\n","import React from \"react\";\n\n// This Col component offers us the convenience of being able to set a column's \"size\" prop instead of its className\n// We can also omit the col- at the start of each Bootstrap column class, e.g. size=\"md-12\" instead of className=\"col-md-12\"\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Col;\n","import React from \"react\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card text-center\">\n      <div className=\"card-header\">\n        <h3>{props.heading}</h3>\n      </div>\n      <div className=\"card-body\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\n\nfunction SearchForm(props) {\n  return (\n    <div className=\"form-group\">\n        <label htmlFor=\"firstName\">Sear\n        ch by first name</label>\n        <input className=\"form-control\"\n            value={props.firstName}\n            name=\"firstName\"\n            onChange={props.handleInputChange}\n            type=\"text\"\n            placeholder=\"First Name\"\n        />\n        <label forhtml=\"sort\">Sort Employees By Ascending or Descending Birth Month</label>\n        <select \n        onChange={props.handleSelectChange}\n        id=\"sort\">\n            <option value=\"ascending\">Ascending</option>\n            <option value=\"descending\">Descending</option>\n        </select>\n    </div>\n)\n}\n\nexport default SearchForm;\n","import React from 'react';\n\n\n\n\nfunction ResultList(props) {\n\n\n    return (\n        <div>\n            <table className=\"table\">\n                <thead>\n                <tr>\n                    <th>Image</th>\n                    <th>Name</th>\n                    <th>Email</th>\n                    \n                </tr>\n                </thead>\n                <tbody>\n                {props.result.map((result, index) => (\n                    <tr key={index}>\n                        <td><img src={result.picture.large} alt=\"person head shot\"/></td>\n                        <td>{result.name.first} {result.name.last}</td>\n                        <td>{result.email}</td>\n                       \n                    </tr>\n                ))}\n                </tbody>\n            </table>\n\n        </div>\n    );\n}\n\nexport default ResultList;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\n\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Col from \"./Col\";\nimport Card from \"./Card\";\nimport SearchForm from \"./searchForm\";\nimport ResultList from \"./ResultList\";\n\nclass Employees extends Component {\n  state = {\n    firstName: \"\",\n    result: [],\n    filteredResults: [],\n  };\n\n  componentDidMount() {\n    this.getUserInfo();\n  }\n\n  getUserInfo = (query) => {\n    API.getUsers(query)\n      .then((res) =>\n        this.setState({\n          result: res.data.results,\n          filteredResults: res.data.results,\n        })\n      )\n      // .then(res => console.log(res.data.results))\n\n      .catch((err) => console.log(err));\n  };\n  handleInputChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    const filteredResults = this.state.result.filter((result) => {\n      return result.name.first.toLowerCase().includes(value.toLowerCase());\n    });\n    this.setState({\n      [name]: value,\n      filteredResults,\n    });\n  };\n\n  handleSelectChange = (event) => {\n    const value = event.target.value;\n    let sortedResults = [];\n\n    if (value === \"ascending\") {\n      sortedResults = [...this.state.filteredResults].sort(\n        (a, b) => a.dob.date.slice(5, 7) - b.dob.date.slice(5, 7)\n      );\n    } else {\n      sortedResults = [...this.state.filteredResults].sort(\n        (a, b) => b.dob.date.slice(5, 7) - a.dob.date.slice(5, 7)\n      );\n    }\n    this.setState({\n      filteredResults: sortedResults,\n    });\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    this.getUserInfo(this.state.search);\n  };\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col size=\"md-8\">\n            <Card heading={\"Employees\"}>\n              <ResultList\n                result={this.state.filteredResults}\n                search={this.state.search}\n              />\n            </Card>\n          </Col>\n          <Col size=\"md-4\">\n            <SearchForm\n              firstName={this.state.firstName}\n              handleSelectChange={this.handleSelectChange}\n              handleInputChange={this.handleInputChange}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Employees;\n","import React from 'react';\n\nimport './App.css';\nimport Employee from './components/EmployeeContainer'\n\nfunction App() {\n  return (\n    <Employee />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}